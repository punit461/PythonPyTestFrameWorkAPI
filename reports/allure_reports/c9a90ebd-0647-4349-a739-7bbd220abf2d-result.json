{"name": "test_successful_login", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'uri' in section: 'URLs'", "trace": "self = <configparser.ConfigParser object at 0x0000011192CFE3E0>, section = 'URLs', option = 'uri'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nC:\\python\\lib\\configparser.py:790: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\lib\\collections\\__init__.py:986: in __getitem__\n    return self.__missing__(key)            # support subclasses that define __missing__\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'protocol': 'http://', 'domain': '.devassisto.com', 'base_env': 'test_env', 'test_env': 'skkfadq31', 'dev_env': '', 'stage_env': '', 'prod_env': ''}, {})\nkey = 'uri'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'uri'\n\nC:\\python\\lib\\collections\\__init__.py:978: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup' for <Function test_successful_login>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        config_reader = ConfigReader()\n        http = config_reader.get_protocol()\n>       uri = config_reader.get_URI()\n\ntests\\base.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconfigs\\config.py:39: in get_URI\n    return self.get_value('URLs', 'URI')\nconfigs\\config.py:23: in get_value\n    return self.config.get(section, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x0000011192CFE3E0>, section = 'URLs', option = 'uri'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'uri' in section: 'URLs'\n\nC:\\python\\lib\\configparser.py:793: NoOptionError"}, "start": 1694173608268, "stop": 1694173608268, "uuid": "97868364-1650-403e-bc81-4f6e5678bc0e", "historyId": "e4f0881b527146040aef34ddac18ca93", "testCaseId": "e4f0881b527146040aef34ddac18ca93", "fullName": "tests.test_api.TestExampleAPI#test_successful_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestExampleAPI"}, {"name": "host", "value": "LAP148-NSP-NSGroup"}, {"name": "thread", "value": "15884-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}